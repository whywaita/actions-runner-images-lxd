diff --git a/images/ubuntu/scripts/build/configure-environment.sh b/images/ubuntu/scripts/build/configure-environment.sh
index f7973d54..50999df2 100644
--- a/images/ubuntu/scripts/build/configure-environment.sh
+++ b/images/ubuntu/scripts/build/configure-environment.sh
@@ -15,9 +15,9 @@ mkdir -p /etc/skel/.config/configstore
 echo 'XDG_CONFIG_HOME=$HOME/.config' | tee -a /etc/environment
 
 # Change waagent entries to use /mnt for swapfile
-sed -i 's/ResourceDisk.Format=n/ResourceDisk.Format=y/g' /etc/waagent.conf
-sed -i 's/ResourceDisk.EnableSwap=n/ResourceDisk.EnableSwap=y/g' /etc/waagent.conf
-sed -i 's/ResourceDisk.SwapSizeMB=0/ResourceDisk.SwapSizeMB=4096/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.Format=n/ResourceDisk.Format=y/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.EnableSwap=n/ResourceDisk.EnableSwap=y/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.SwapSizeMB=0/ResourceDisk.SwapSizeMB=4096/g' /etc/waagent.conf
 
 # Add localhost alias to ::1 IPv6
 sed -i 's/::1 ip6-localhost ip6-loopback/::1     localhost ip6-localhost ip6-loopback/g' /etc/hosts
diff --git a/images/ubuntu/scripts/build/dotnetcore-sdk.sh b/images/ubuntu/scripts/build/dotnetcore-sdk.sh
index bc9cbd8e..1ff47722 100644
--- a/images/ubuntu/scripts/build/dotnetcore-sdk.sh
+++ b/images/ubuntu/scripts/build/dotnetcore-sdk.sh
@@ -50,10 +50,10 @@ for version in ${DOTNET_VERSIONS[@]}; do
     download_with_retries "${release_url}" "." "${version}.json"
     releases=$(cat "./${version}.json")
     if [[ $version == "6.0" ]]; then
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r 'first(.releases[].sdks[]?.version | select(contains("preview") or contains("rc") | not))'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r 'first(.sdks[]?.version | select(contains("preview") or contains("rc") | not))'))
     else
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r '.releases[].sdk.version | select(contains("preview") or contains("rc") | not)'))
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r '.releases[].sdks[]?.version | select(contains("preview") or contains("rc") | not)'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r '.sdk.version | select(contains("preview") or contains("rc") | not)'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r '.sdks[]?.version | select(contains("preview") or contains("rc") | not)'))
     fi
     rm ./${version}.json
 done
diff --git a/images/ubuntu/scripts/build/homebrew.sh b/images/ubuntu/scripts/build/homebrew.sh
index d1337214..37be4975 100644
--- a/images/ubuntu/scripts/build/homebrew.sh
+++ b/images/ubuntu/scripts/build/homebrew.sh
@@ -22,6 +22,8 @@ setEtcEnvironmentVariable HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS 3650
 echo "Validate the installation reloading /etc/environment"
 reloadEtcEnvironment
 
+cd ${HOME}
+
 gfortran=$(brew --prefix)/bin/gfortran
 # Remove gfortran symlink, not to conflict with system gfortran
 if [[ -e $gfortran ]]; then
diff --git a/images/ubuntu/templates/ubuntu-20.04.json b/images/ubuntu/templates/ubuntu-20.04.json
index 2d00e076..4c0e7814 100644
--- a/images/ubuntu/templates/ubuntu-20.04.json
+++ b/images/ubuntu/templates/ubuntu-20.04.json
@@ -31,36 +31,32 @@
     ],
     "builders": [
         {
-            "type": "azure-arm",
-            "client_id": "{{user `client_id`}}",
-            "client_secret": "{{user `client_secret`}}",
-            "client_cert_path": "{{user `client_cert_path`}}",
-            "subscription_id": "{{user `subscription_id`}}",
-            "tenant_id": "{{user `tenant_id`}}",
-            "location": "{{user `location`}}",
-            "vm_size": "{{user `vm_size`}}",
-            "managed_image_name": "{{user `managed_image_name`}}",
-            "managed_image_resource_group_name": "{{user `managed_image_resource_group_name`}}",
-            "build_resource_group_name": "{{user `build_resource_group_name`}}",
-            "temp_resource_group_name": "{{user `temp_resource_group_name`}}",
-            "virtual_network_name": "{{user `virtual_network_name`}}",
-            "virtual_network_resource_group_name": "{{user `virtual_network_resource_group_name`}}",
-            "virtual_network_subnet_name": "{{user `virtual_network_subnet_name`}}",
-            "private_virtual_network_with_public_ip": "{{user `private_virtual_network_with_public_ip`}}",
-            "allowed_inbound_ip_addresses": "{{user `allowed_inbound_ip_addresses`}}",
-            "os_type": "Linux",
-            "image_publisher": "canonical",
-            "image_offer": "0001-com-ubuntu-server-focal",
-            "image_sku": "20_04-lts",
-            "os_disk_size_gb": "86"
+          "type": "lxd",
+          "image": "ubuntu:focal",
+          "container_name": "packer-lxd",
+          "skip_publish": true
         }
     ],
     "provisioners": [
+        {
+            "type": "shell",
+            "inline": [
+                "apt-get update -y; apt-get install whois",
+                "useradd -p $(echo runner | mkpasswd -s -m sha-512) -m -s /bin/bash runner",
+                "gpasswd -a runner sudo",
+                "echo 'runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
+            ],
+            "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+        },
         {
             "type": "shell",
             "inline": [
                 "mkdir {{user `image_folder`}}",
-                "chmod 777 {{user `image_folder`}}"
+                "chmod 755 {{user `image_folder`}}",
+                "mkdir {{user `installer_script_folder`}}",
+                "chmod 755 {{user `installer_script_folder`}}",
+                "mkdir {{user `helper_script_folder`}}",
+                "chmod 755 {{user `helper_script_folder`}}"
             ],
             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
         },
@@ -89,12 +85,12 @@
         {
             "type": "file",
             "source": "{{template_dir}}/../scripts/helpers",
-            "destination": "{{user `helper_script_folder`}}"
+            "destination": "{{user `image_folder`}}"
         },
         {
             "type": "file",
             "source": "{{template_dir}}/../scripts/build",
-            "destination": "{{user `installer_script_folder`}}"
+            "destination": "{{user `image_folder`}}"
         },
         {
             "type": "file",
@@ -270,6 +266,17 @@
             ],
             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
         },
+        {
+            "type": "shell",
+            "environment_vars": [
+                "HELPER_SCRIPTS={{user `helper_script_folder`}}",
+                "DEBIAN_FRONTEND=noninteractive",
+                "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
+            ],
+            "inline": [
+                "sudo chmod 777 ${INSTALLER_SCRIPT_FOLDER}/toolset.json"
+            ]
+        },
         {
             "type": "shell",
             "scripts": [
@@ -293,6 +300,13 @@
             ],
             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
         },
+        {
+            "type": "shell",
+            "inline": [
+                "gpasswd -a runner docker"
+            ],
+            "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+        },
         {
             "type": "shell",
             "scripts": [
@@ -303,7 +317,7 @@
                 "DEBIAN_FRONTEND=noninteractive",
                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
             ],
-            "execute_command": "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
+            "execute_command": "sudo -u runner /bin/sh -c '{{ .Vars }} {{ .Path }}'"
         },
         {
             "type": "shell",
@@ -332,33 +346,6 @@
             "script": "{{template_dir}}/../scripts/build/apt-mock-remove.sh",
             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
         },
-        {
-            "type": "shell",
-            "max_retries": 3,
-            "start_retry_timeout": "2m",
-            "inline": [
-                "pwsh -Command Write-Host Running SoftwareReport.Generator.ps1 script",
-                "pwsh -File {{user `image_folder`}}/SoftwareReport/SoftwareReport.Generator.ps1 -OutputDirectory {{user `image_folder`}}",
-                "pwsh -Command Write-Host Running RunAll-Tests.ps1 script",
-                "pwsh -File {{user `image_folder`}}/tests/RunAll-Tests.ps1 -OutputDirectory {{user `image_folder`}}"
-            ],
-            "environment_vars": [
-                "IMAGE_VERSION={{user `image_version`}}",
-                "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
-            ]
-        },
-        {
-            "type": "file",
-            "source": "{{user `image_folder`}}/software-report.md",
-            "destination": "{{template_dir}}/../Ubuntu2004-Readme.md",
-            "direction": "download"
-        },
-        {
-            "type": "file",
-            "source": "{{user `image_folder`}}/software-report.json",
-            "destination": "{{template_dir}}/../software-report.json",
-            "direction": "download"
-        },
         {
             "type": "shell",
             "scripts":[
@@ -396,8 +383,7 @@
         {
             "type": "shell",
             "inline": [
-                "sleep 30",
-                "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
+                "sleep 30"
             ],
             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
         }
diff --git a/images/ubuntu/templates/ubuntu-22.04.pkr.hcl b/images/ubuntu/templates/ubuntu-22.04.pkr.hcl
index ecf121d3..d84da368 100644
--- a/images/ubuntu/templates/ubuntu-22.04.pkr.hcl
+++ b/images/ubuntu/templates/ubuntu-22.04.pkr.hcl
@@ -1,48 +1,3 @@
-locals {
-  managed_image_name = var.managed_image_name != "" ? var.managed_image_name : "packer-${var.image_os}-${var.image_version}"
-}
-
-variable "allowed_inbound_ip_addresses" {
-  type    = list(string)
-  default = []
-}
-
-variable "azure_tags" {
-  type    = map(string)
-  default = {}
-}
-
-variable "build_resource_group_name" {
-  type    = string
-  default = "${env("BUILD_RESOURCE_GROUP_NAME")}"
-}
-
-variable "managed_image_name" {
-  type    = string
-  default = ""
-}
-
-variable "client_id" {
-  type    = string
-  default = "${env("ARM_CLIENT_ID")}"
-}
-
-variable "client_secret" {
-  type      = string
-  default   = "${env("ARM_CLIENT_SECRET")}"
-  sensitive = true
-}
-
-variable "client_cert_path" {
-  type      = string
-  default   = "${env("ARM_CLIENT_CERT_PATH")}"
-}
-
-variable "commit_url" {
-  type      = string
-  default   = ""
-}
-
 variable "dockerhub_login" {
   type    = string
   default = "${env("DOCKERHUB_LOGIN")}"
@@ -83,104 +38,40 @@ variable "installer_script_folder" {
   default = "/imagegeneration/installers"
 }
 
-variable "install_password" {
-  type  = string
-  default = ""
-}
-
-variable "location" {
-  type    = string
-  default = "${env("ARM_RESOURCE_LOCATION")}"
-}
-
-variable "private_virtual_network_with_public_ip" {
-  type    = bool
-  default = false
-}
-
-variable "managed_image_resource_group_name" {
-  type    = string
-  default = "${env("ARM_RESOURCE_GROUP")}"
-}
-
 variable "run_validation_diskspace" {
   type    = bool
   default = false
 }
 
-variable "subscription_id" {
-  type    = string
-  default = "${env("ARM_SUBSCRIPTION_ID")}"
-}
-
-variable "temp_resource_group_name" {
-  type    = string
-  default = "${env("TEMP_RESOURCE_GROUP_NAME")}"
-}
-
-variable "tenant_id" {
-  type    = string
-  default = "${env("ARM_TENANT_ID")}"
-}
-
-variable "virtual_network_name" {
-  type    = string
-  default = "${env("VNET_NAME")}"
-}
-
-variable "virtual_network_resource_group_name" {
-  type    = string
-  default = "${env("VNET_RESOURCE_GROUP")}"
-}
-
-variable "virtual_network_subnet_name" {
-  type    = string
-  default = "${env("VNET_SUBNET")}"
+source "lxd" "build-vhd" {
+  image          = "ubuntu:jammy"
+  container_name = "packer-lxd"
+  skip_publish   = true
 }
 
-variable "vm_size" {
-  type    = string
-  default = "Standard_D4s_v4"
-}
+build {
+  sources = ["source.lxd.build-vhd"]
 
-source "azure-arm" "build_image" {
-  allowed_inbound_ip_addresses           = "${var.allowed_inbound_ip_addresses}"
-  build_resource_group_name              = "${var.build_resource_group_name}"
-  client_id                              = "${var.client_id}"
-  client_secret                          = "${var.client_secret}"
-  client_cert_path                       = "${var.client_cert_path}"
-  image_offer                            = "0001-com-ubuntu-server-jammy"
-  image_publisher                        = "canonical"
-  image_sku                              = "22_04-lts"
-  location                               = "${var.location}"
-  os_disk_size_gb                        = "86"
-  os_type                                = "Linux"
-  private_virtual_network_with_public_ip = "${var.private_virtual_network_with_public_ip}"
-  managed_image_name                     = "${local.managed_image_name}"
-  managed_image_resource_group_name      = "${var.managed_image_resource_group_name}"
-  subscription_id                        = "${var.subscription_id}"
-  temp_resource_group_name               = "${var.temp_resource_group_name}"
-  tenant_id                              = "${var.tenant_id}"
-  virtual_network_name                   = "${var.virtual_network_name}"
-  virtual_network_resource_group_name    = "${var.virtual_network_resource_group_name}"
-  virtual_network_subnet_name            = "${var.virtual_network_subnet_name}"
-  vm_size                                = "${var.vm_size}"
-
-  dynamic "azure_tag" {
-    for_each = var.azure_tags
-    content {
-      name = azure_tag.key
-      value = azure_tag.value
-    }
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "apt-get update -y; apt-get install whois",
+      "useradd -p $(echo runner | mkpasswd -s -m sha-512) -m -s /bin/bash runner",
+      "gpasswd -a runner sudo",
+      "echo 'runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
+    ]
   }
-}
-
-build {
-  sources = ["source.azure-arm.build_image"]
 
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["mkdir ${var.image_folder}", "chmod 777 ${var.image_folder}"]
+    inline          = [
+      "mkdir ${var.image_folder}",
+      "chmod 755 ${var.image_folder}",
+      "mkdir ${var.installer_script_folder}",
+      "chmod 755 ${var.installer_script_folder}",
+      "mkdir ${var.helper_script_folder}",
+      "chmod 755 ${var.helper_script_folder}"
+    ]
   }
 
   provisioner "shell" {
@@ -204,12 +95,12 @@ build {
   }
 
   provisioner "file" {
-    destination = "${var.helper_script_folder}"
+    destination = "${var.image_folder}"
     source      = "${path.root}/../scripts/helpers"
   }
 
   provisioner "file" {
-    destination = "${var.installer_script_folder}"
+    destination = "${var.image_folder}"
     source      = "${path.root}/../scripts/build"
   }
 
@@ -349,6 +240,13 @@ build {
     scripts          = ["${path.root}/../scripts/build/Install-Toolset.ps1", "${path.root}/../scripts/build/Configure-Toolset.ps1"]
   }
 
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "gpasswd -a runner docker"
+    ]
+  }
+
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
     execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
@@ -357,10 +255,17 @@ build {
 
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    execute_command  = "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
+    execute_command  = "sudo -u runner /bin/sh -c '{{ .Vars }} {{ .Path }}'"
     scripts          = ["${path.root}/../scripts/build/homebrew.sh"]
   }
 
+  provisioner "shell" {
+    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = ["chmod 777 ${var.installer_script_folder}/toolset.json"]
+  }
+
+
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
     script          = "${path.root}/../scripts/build/snap.sh"
@@ -384,23 +289,6 @@ build {
     script          = "${path.root}/../scripts/build/apt-mock-remove.sh"
   }
 
-  provisioner "shell" {
-    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    inline           = ["pwsh -File ${var.image_folder}/SoftwareReport/SoftwareReport.Generator.ps1 -OutputDirectory ${var.image_folder}", "pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}"]
-  }
-
-  provisioner "file" {
-    destination = "${path.root}/../Ubuntu2204-Readme.md"
-    direction   = "download"
-    source      = "${var.image_folder}/software-report.md"
-  }
-
-  provisioner "file" {
-    destination = "${path.root}/../software-report.json"
-    direction   = "download"
-    source      = "${var.image_folder}/software-report.json"
-  }
-
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPT_FOLDER=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "IMAGE_FOLDER=${var.image_folder}"]
     execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
@@ -422,9 +310,4 @@ build {
     inline          = ["mkdir -p /etc/vsts", "cp /tmp/ubuntu2204.conf /etc/vsts/machine_instance.conf"]
   }
 
-  provisioner "shell" {
-    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["sleep 30", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
-  }
-
 }
