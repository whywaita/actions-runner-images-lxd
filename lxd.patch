diff --git a/images/ubuntu/assets/post-gen/environment-variables.sh b/images/ubuntu/assets/post-gen/environment-variables.sh
index 975c8a4a..016995a1 100644
--- a/images/ubuntu/assets/post-gen/environment-variables.sh
+++ b/images/ubuntu/assets/post-gen/environment-variables.sh
@@ -2,5 +2,5 @@
 
 # Replace $HOME with the default user's home directory for environmental variables related to the default user home directory
 
-homeDir=$(cut -d: -f6 /etc/passwd | tail -1)
-sed -i "s|\$HOME|$homeDir|g" /etc/environment
\ No newline at end of file
+homeDir=$(cut -d: -f1,6 /etc/passwd | grep "runner:" | cut -d: -f2)
+sed -i "s|\$HOME|$homeDir|g" /etc/environment
diff --git a/images/ubuntu/assets/post-gen/systemd-linger.sh b/images/ubuntu/assets/post-gen/systemd-linger.sh
index 294c8f1b..bfc28952 100644
--- a/images/ubuntu/assets/post-gen/systemd-linger.sh
+++ b/images/ubuntu/assets/post-gen/systemd-linger.sh
@@ -1,5 +1,5 @@
 #!/bin/bash
 
 # Enable user session on boot, not on login
-UserId=$(cut -d: -f3 /etc/passwd | tail -1)
+UserId=$(cut -d: -f1,3 /etc/passwd | grep "runner:" | cut -d: -f2)
 loginctl enable-linger $UserId
diff --git a/images/ubuntu/scripts/build/configure-environment.sh b/images/ubuntu/scripts/build/configure-environment.sh
index 27a607fe..e4c0736d 100644
--- a/images/ubuntu/scripts/build/configure-environment.sh
+++ b/images/ubuntu/scripts/build/configure-environment.sh
@@ -20,9 +20,9 @@ mkdir -p /etc/skel/.config/configstore
 set_etc_environment_variable "XDG_CONFIG_HOME" '$HOME/.config'
 
 # Change waagent entries to use /mnt for swap file
-sed -i 's/ResourceDisk.Format=n/ResourceDisk.Format=y/g' /etc/waagent.conf
-sed -i 's/ResourceDisk.EnableSwap=n/ResourceDisk.EnableSwap=y/g' /etc/waagent.conf
-sed -i 's/ResourceDisk.SwapSizeMB=0/ResourceDisk.SwapSizeMB=4096/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.Format=n/ResourceDisk.Format=y/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.EnableSwap=n/ResourceDisk.EnableSwap=y/g' /etc/waagent.conf
+#sed -i 's/ResourceDisk.SwapSizeMB=0/ResourceDisk.SwapSizeMB=4096/g' /etc/waagent.conf
 
 # Add localhost alias to ::1 IPv6
 sed -i 's/::1 ip6-localhost ip6-loopback/::1     localhost ip6-localhost ip6-loopback/g' /etc/hosts
diff --git a/images/ubuntu/scripts/build/install-container-tools.sh b/images/ubuntu/scripts/build/install-container-tools.sh
index ac9dcdff..fc23d9fc 100644
--- a/images/ubuntu/scripts/build/install-container-tools.sh
+++ b/images/ubuntu/scripts/build/install-container-tools.sh
@@ -30,4 +30,8 @@ apt-get install ${install_packages[@]}
 mkdir -p /etc/containers
 printf "[registries.search]\nregistries = ['docker.io', 'quay.io']\n" | tee /etc/containers/registries.conf
 
+if [ -f /etc/containers/storage.conf ]; then
+    sed -i 's|#mount_program = "/usr/bin/fuse-overlayfs"|mount_program = "/usr/bin/fuse-overlayfs"|g' /etc/containers/storage.conf
+fi
+
 invoke_tests "Tools" "Containers"
diff --git a/images/ubuntu/scripts/build/install-dotnetcore-sdk.sh b/images/ubuntu/scripts/build/install-dotnetcore-sdk.sh
index f450f963..6462f750 100644
--- a/images/ubuntu/scripts/build/install-dotnetcore-sdk.sh
+++ b/images/ubuntu/scripts/build/install-dotnetcore-sdk.sh
@@ -65,10 +65,10 @@ for version in ${dotnet_versions[@]}; do
     release_url="https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/${version}/releases.json"
     releases=$(cat "$(download_with_retry "$release_url")")
     if [[ $version == "6.0" ]]; then
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r 'first(.releases[].sdks[]?.version | select(contains("preview") or contains("rc") | not))'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r 'first(.sdks[]?.version | select(contains("preview") or contains("rc") | not))'))
     else
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r '.releases[].sdk.version | select(contains("preview") or contains("rc") | not)'))
-        sdks=("${sdks[@]}" $(echo "${releases}" | jq -r '.releases[].sdks[]?.version | select(contains("preview") or contains("rc") | not)'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r '.sdk.version | select(contains("preview") or contains("rc") | not)'))
+        sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[] | select (."release-date" >= "2021-12-01")' | jq -r '.sdks[]?.version | select(contains("preview") or contains("rc") | not)'))
     fi
 done
 
diff --git a/images/ubuntu/scripts/build/install-homebrew.sh b/images/ubuntu/scripts/build/install-homebrew.sh
index c8f2b682..1da414ab 100644
--- a/images/ubuntu/scripts/build/install-homebrew.sh
+++ b/images/ubuntu/scripts/build/install-homebrew.sh
@@ -9,6 +9,8 @@
 source $HELPER_SCRIPTS/etc-environment.sh
 source $HELPER_SCRIPTS/install.sh
 
+cd ${HOME}
+
 # Install the Homebrew on Linux
 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
 
@@ -28,4 +30,5 @@ if [[ -e $gfortran ]]; then
     rm $gfortran
 fi
 
-invoke_tests "Tools" "Homebrew"
+sudo -E invoke_tests "Tools" "Homebrew"
+sudo rm -rf ${HOME}/.local
diff --git a/images/ubuntu/scripts/docs-gen/Generate-SoftwareReport.ps1 b/images/ubuntu/scripts/docs-gen/Generate-SoftwareReport.ps1
index c138501b..c2c1b78a 100644
--- a/images/ubuntu/scripts/docs-gen/Generate-SoftwareReport.ps1
+++ b/images/ubuntu/scripts/docs-gen/Generate-SoftwareReport.ps1
@@ -6,6 +6,8 @@ param (
     [string] $OutputDirectory
 )
 
+Write-Host "Path: $env:PATH"
+
 $global:ErrorActionPreference = "Stop"
 $global:ErrorView = "NormalView"
 Set-StrictMode -Version Latest
diff --git a/images/ubuntu/templates/build.ubuntu-22_04.pkr.hcl b/images/ubuntu/templates/build.ubuntu-22_04.pkr.hcl
index 05259514..8e6e9dee 100644
--- a/images/ubuntu/templates/build.ubuntu-22_04.pkr.hcl
+++ b/images/ubuntu/templates/build.ubuntu-22_04.pkr.hcl
@@ -1,5 +1,11 @@
+source "lxd" "build_image_22_04" {
+  image          = "ubuntu:jammy"
+  container_name = "packer-lxd"
+  skip_publish   = true
+}
+
 build {
-  sources = ["source.azure-arm.image"]
+  sources = ["source.lxd.build_image_22_04"]
   name = "ubuntu-22_04"
 
   provisioner "shell" {
@@ -7,9 +13,19 @@ build {
     inline          = ["mkdir ${var.image_folder}", "chmod 777 ${var.image_folder}"]
   }
 
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "apt-get update -y; apt-get install whois",
+      "useradd -p $(echo runner | mkpasswd -s -m sha-512) -m -s /bin/bash runner",
+      "gpasswd -a runner sudo",
+      "echo 'runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
+    ]
+  }
+
   provisioner "file" {
     destination = "${var.helper_script_folder}"
-    source      = "${path.root}/../scripts/helpers"
+    source      = "${path.root}/../scripts/helpers/"
   }
 
   provisioner "shell" {
@@ -34,21 +50,27 @@ build {
 
   provisioner "file" {
     destination = "${var.installer_script_folder}"
-    source      = "${path.root}/../scripts/build"
+    source      = "${path.root}/../scripts/build/"
   }
 
   provisioner "file" {
-    destination = "${var.image_folder}"
-    sources     = [
-      "${path.root}/../assets/post-gen",
-      "${path.root}/../scripts/tests",
-      "${path.root}/../scripts/docs-gen"
-    ]
+    destination = "/imagegeneration/post-gen"
+    source      = "${path.root}/../assets/post-gen/"
   }
 
   provisioner "file" {
-    destination = "${var.image_folder}/docs-gen/"
-    source      = "${path.root}/../../../helpers/software-report-base"
+    destination = "/imagegeneration/tests"
+    source      = "${path.root}/../scripts/tests/"
+  }
+
+  provisioner "file" {
+    destination = "/imagegeneration/docs-gen"
+    source      = "${path.root}/../scripts/docs-gen/"
+  }
+
+  provisioner "file" {
+    destination = "${var.image_folder}/docs-gen/software-report-base"
+    source      = "${path.root}/../../../helpers/software-report-base/"
   }
 
   provisioner "file" {
@@ -174,6 +196,20 @@ build {
     scripts          = ["${path.root}/../scripts/build/Install-Toolset.ps1", "${path.root}/../scripts/build/Configure-Toolset.ps1"]
   }
 
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "gpasswd -a runner docker"
+    ]
+  }
+
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "gpasswd -a runner docker"
+    ]
+  }
+
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
     execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
@@ -182,10 +218,17 @@ build {
 
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    execute_command  = "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
+    execute_command  = "sudo -u runner /bin/sh -c '{{ .Vars }} {{ .Path }}'"
     scripts          = ["${path.root}/../scripts/build/install-homebrew.sh"]
   }
 
+  provisioner "shell" {
+    environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = ["chmod 777 ${var.installer_script_folder}/toolset.json"]
+  }
+
+
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}"]
     execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
@@ -206,8 +249,15 @@ build {
   }
 
   provisioner "shell" {
-    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    inline           = ["pwsh -File ${var.image_folder}/SoftwareReport/Generate-SoftwareReport.ps1 -OutputDirectory ${var.image_folder}", "pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}"]
+    execute_command  = "chmod +x {{ .Path }}; {{ .Vars }} bash -l {{ .Path }}"
+    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache"]
+    inline           = [
+      "cp -a /home/runner/.bashrc /home/runner/.bashrc.bak ; rsync -a /root/ /home/runner/ --include='.*' --exclude='*' && chown -R runner:runner /home/runner",
+      "sudo chmod 777 -R ${var.image_folder}",
+      "cpan < /dev/null",
+      "sudo su runner bash -lc 'IMAGE_VERSION=${var.image_version} INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder} AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache pwsh -File ${var.image_folder}/SoftwareReport/Generate-SoftwareReport.ps1 -OutputDirectory ${var.image_folder}'",
+      "sudo su runner bash -lc 'IMAGE_VERSION=${var.image_version} INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder} AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}'"
+    ]
   }
 
   provisioner "file" {
@@ -246,7 +296,6 @@ build {
 
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["sleep 30", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
+    inline          = ["export HISTSIZE=0 && sync"]
   }
-
 }
diff --git a/images/ubuntu/templates/build.ubuntu-24_04.pkr.hcl b/images/ubuntu/templates/build.ubuntu-24_04.pkr.hcl
index 94f595c3..8440bcc3 100644
--- a/images/ubuntu/templates/build.ubuntu-24_04.pkr.hcl
+++ b/images/ubuntu/templates/build.ubuntu-24_04.pkr.hcl
@@ -1,7 +1,23 @@
+source "lxd" "build_image_24_04" {
+  image          = "ubuntu:noble"
+  container_name = "packer-lxd"
+  skip_publish   = true
+}
+
 build {
-  sources = ["source.azure-arm.image"]
+  sources = ["source.lxd.build_image_24_04"]
   name = "ubuntu-24_04"
 
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "apt-get update -y; apt-get install whois",
+      "useradd -p $(echo runner | mkpasswd -s -m sha-512) -m -s /bin/bash runner",
+      "gpasswd -a runner sudo",
+      "echo 'runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
+    ]
+  }
+
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
     inline          = ["mkdir ${var.image_folder}", "chmod 777 ${var.image_folder}"]
@@ -9,7 +25,7 @@ build {
 
   provisioner "file" {
     destination = "${var.helper_script_folder}"
-    source      = "${path.root}/../scripts/helpers"
+    source      = "${path.root}/../scripts/helpers/"
   }
 
   provisioner "shell" {
@@ -34,21 +50,27 @@ build {
 
   provisioner "file" {
     destination = "${var.installer_script_folder}"
-    source      = "${path.root}/../scripts/build"
+    source      = "${path.root}/../scripts/build/"
   }
 
   provisioner "file" {
-    destination = "${var.image_folder}"
-    sources     = [
-      "${path.root}/../assets/post-gen",
-      "${path.root}/../scripts/tests",
-      "${path.root}/../scripts/docs-gen"
-    ]
+    destination = "/imagegeneration/post-gen"
+    source      = "${path.root}/../assets/post-gen/"
+  }
+
+  provisioner "file" {
+    destination = "/imagegeneration/tests"
+    source      = "${path.root}/../scripts/tests/"
+  }
+
+  provisioner "file" {
+    destination = "/imagegeneration/docs-gen"
+    source      = "${path.root}/../scripts/docs-gen/"
   }
 
   provisioner "file" {
-    destination = "${var.image_folder}/docs-gen/"
-    source      = "${path.root}/../../../helpers/software-report-base"
+    destination = "${var.image_folder}/docs-gen/software-report-base"
+    source      = "${path.root}/../../../helpers/software-report-base/"
   }
 
   provisioner "file" {
@@ -56,6 +78,20 @@ build {
     source      = "${path.root}/../toolsets/toolset-2404.json"
   }
 
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "sudo chmod 777 ${var.installer_script_folder}/toolset.json"
+    ]
+  }
+
+  provisioner "shell" {
+    execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline          = [
+      "sudo chmod 777 ${var.installer_script_folder}/toolset.json"
+    ]
+  }
+
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
     inline          = [
@@ -157,6 +193,20 @@ provisioner "shell" {
     scripts          = ["${path.root}/../scripts/build/install-docker.sh"]
   }
 
+  provisioner "shell" {
+    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline           = [
+      "gpasswd -a runner docker"
+    ]
+  }
+
+  provisioner "shell" {
+    execute_command  = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
+    inline           = [
+      "gpasswd -a runner docker"
+    ]
+  }
+
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
     execute_command  = "sudo sh -c '{{ .Vars }} pwsh -f {{ .Path }}'"
@@ -171,7 +221,7 @@ provisioner "shell" {
 
   provisioner "shell" {
     environment_vars = ["HELPER_SCRIPTS=${var.helper_script_folder}", "DEBIAN_FRONTEND=noninteractive", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    execute_command  = "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
+    execute_command  = "sudo -u runner /bin/sh -c '{{ .Vars }} {{ .Path }}'"
     scripts          = ["${path.root}/../scripts/build/install-homebrew.sh"]
   }
 
@@ -195,16 +245,23 @@ provisioner "shell" {
   }
 
   provisioner "shell" {
-    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}"]
-    inline           = ["pwsh -File ${var.image_folder}/SoftwareReport/Generate-SoftwareReport.ps1 -OutputDirectory ${var.image_folder}", "pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}"]
+    execute_command  = "chmod +x {{ .Path }}; {{ .Vars }} bash -l {{ .Path }}"
+    environment_vars = ["IMAGE_VERSION=${var.image_version}", "INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder}", "AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache"]
+    inline           = [
+      "cp -a /home/runner/.bashrc /home/runner/.bashrc.bak ; rsync -a /root/ /home/runner/ --include='.*' --exclude='*' && chown -R runner:runner /home/runner",
+      "sudo chmod 777 -R ${var.image_folder}",
+      "cpan < /dev/null",
+      "sudo su runner bash -lc 'IMAGE_VERSION=${var.image_version} INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder} AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache pwsh -File ${var.image_folder}/SoftwareReport/Generate-SoftwareReport.ps1 -OutputDirectory ${var.image_folder}'",
+      "sudo su runner bash -lc 'IMAGE_VERSION=${var.image_version} INSTALLER_SCRIPT_FOLDER=${var.installer_script_folder} AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache pwsh -File ${var.image_folder}/tests/RunAll-Tests.ps1 -OutputDirectory ${var.image_folder}'"
+    ]
   }
-
+  
   provisioner "file" {
     destination = "${path.root}/../Ubuntu2404-Readme.md"
     direction   = "download"
     source      = "${var.image_folder}/software-report.md"
   }
-
+  
   provisioner "file" {
     destination = "${path.root}/../software-report.json"
     direction   = "download"
@@ -225,7 +282,7 @@ provisioner "shell" {
 
   provisioner "shell" {
     execute_command = "sudo sh -c '{{ .Vars }} {{ .Path }}'"
-    inline          = ["sleep 30", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
+    inline          = ["export HISTSIZE=0 && sync"]
   }
 
 }
diff --git a/images/ubuntu/templates/locals.ubuntu.pkr.hcl b/images/ubuntu/templates/locals.ubuntu.pkr.hcl
deleted file mode 100644
index fe9b189a..00000000
--- a/images/ubuntu/templates/locals.ubuntu.pkr.hcl
+++ /dev/null
@@ -1,18 +0,0 @@
-locals {
-  image_properties_map = {
-      "ubuntu22" = {
-            publisher       = "canonical"
-            offer           = "0001-com-ubuntu-server-jammy"
-            sku             = "22_04-lts"
-            os_disk_size_gb = coalesce(var.os_disk_size_gb, 75)
-      },
-      "ubuntu24" = {
-            publisher       = "canonical"
-            offer           = "ubuntu-24_04-lts"
-            sku             = "server-gen1"
-            os_disk_size_gb = coalesce(var.os_disk_size_gb, 75)
-      }
-  }
-
-  image_properties = local.image_properties_map[var.image_os]
-}
diff --git a/images/ubuntu/templates/source.ubuntu.pkr.hcl b/images/ubuntu/templates/source.ubuntu.pkr.hcl
index 4080b9b8..a0fc7d33 100644
--- a/images/ubuntu/templates/source.ubuntu.pkr.hcl
+++ b/images/ubuntu/templates/source.ubuntu.pkr.hcl
@@ -1,48 +1,8 @@
-source "azure-arm" "image" {
-  client_cert_path                       = var.client_cert_path
-  client_id                              = var.client_id
-  client_secret                          = var.client_secret
-  object_id                              = var.object_id
-  oidc_request_token                     = var.oidc_request_token
-  oidc_request_url                       = var.oidc_request_url
-  subscription_id                        = var.subscription_id
-  tenant_id                              = var.tenant_id
-  use_azure_cli_auth                     = var.use_azure_cli_auth
-
-  allowed_inbound_ip_addresses           = var.allowed_inbound_ip_addresses
-  build_resource_group_name              = var.build_resource_group_name
-  image_offer                            = local.image_properties.offer
-  image_publisher                        = local.image_properties.publisher
-  image_sku                              = local.image_properties.sku
-  image_version                          = var.source_image_version
-  location                               = var.location
-  managed_image_name                     = var.managed_image_name
-  managed_image_resource_group_name      = var.managed_image_resource_group_name
-  managed_image_storage_account_type     = var.managed_image_storage_account_type
-  os_disk_size_gb                        = local.image_properties.os_disk_size_gb
-  os_type                                = var.image_os_type
-  private_virtual_network_with_public_ip = var.private_virtual_network_with_public_ip
-  temp_resource_group_name               = var.temp_resource_group_name
-  virtual_network_name                   = var.virtual_network_name
-  virtual_network_resource_group_name    = var.virtual_network_resource_group_name
-  virtual_network_subnet_name            = var.virtual_network_subnet_name
-  vm_size                                = var.vm_size
-  winrm_username                         = var.winrm_username
-
-  shared_image_gallery_destination {
-    subscription                         = var.subscription_id
-    gallery_name                         = var.gallery_name
-    resource_group                       = var.gallery_resource_group_name
-    image_name                           = var.gallery_image_name
-    image_version                        = var.gallery_image_version
-    storage_account_type                 = var.gallery_storage_account_type
-  }
-
-  dynamic "azure_tag" {
-    for_each = var.azure_tags
-    content {
-      name  = azure_tag.key
-      value = azure_tag.value
+packer {
+  required_plugins {
+    lxd = {
+      source  = "github.com/hashicorp/lxd"
+      version = "1.0.3"
     }
   }
 }
diff --git a/images/ubuntu/templates/variable.ubuntu.pkr.hcl b/images/ubuntu/templates/variable.ubuntu.pkr.hcl
index e2c6aaf7..1578cf67 100644
--- a/images/ubuntu/templates/variable.ubuntu.pkr.hcl
+++ b/images/ubuntu/templates/variable.ubuntu.pkr.hcl
@@ -1,132 +1,3 @@
-// Authentication related variables
-variable "client_cert_path" {
-  type    = string
-  default = "${env("ARM_CLIENT_CERT_PATH")}"
-}
-variable "client_id" {
-  type    = string
-  default = "${env("ARM_CLIENT_ID")}"
-}
-variable "client_secret" {
-  type      = string
-  default   = "${env("ARM_CLIENT_SECRET")}"
-  sensitive = true
-}
-variable "object_id" {
-  type    = string
-  default = "${env("ARM_OBJECT_ID")}"
-}
-variable "oidc_request_token" {
-  type    = string
-  default = ""
-}
-variable "oidc_request_url" {
-  type    = string
-  default = ""
-}
-variable "subscription_id" {
-  type    = string
-  default = "${env("ARM_SUBSCRIPTION_ID")}"
-}
-variable "tenant_id" {
-  type    = string
-  default = "${env("ARM_TENANT_ID")}"
-}
-variable "use_azure_cli_auth" {
-  type    = bool
-  default = false
-}
-
-// Azure environment related variables
-variable "allowed_inbound_ip_addresses" {
-  type    = list(string)
-  default = []
-}
-variable "azure_tags" {
-  type    = map(string)
-  default = {}
-}
-variable "build_resource_group_name" {
-  type    = string
-  default = "${env("BUILD_RG_NAME")}"
-}
-variable "gallery_image_name" {
-  type    = string
-  default = "${env("GALLERY_IMAGE_NAME")}"
-}
-variable "gallery_image_version" {
-  type    = string
-  default = "${env("GALLERY_IMAGE_VERSION")}"
-}
-variable "gallery_name" {
-  type    = string
-  default = "${env("GALLERY_NAME")}"
-}
-variable "gallery_resource_group_name" {
-  type    = string
-  default = "${env("GALLERY_RG_NAME")}"
-}
-variable "gallery_storage_account_type" {
-  type    = string
-  default = "${env("GALLERY_STORAGE_ACCOUNT_TYPE")}"
-}
-variable "image_os_type" {
-  type    = string
-  default = "Linux"
-}
-variable "location" {
-  type    = string
-  default = ""
-}
-variable "managed_image_name" {
-  type    = string
-  default = ""
-}
-variable "managed_image_resource_group_name" {
-  type    = string
-  default = "${env("ARM_RESOURCE_GROUP")}"
-}
-variable "managed_image_storage_account_type" {
-  type    = string
-  default = "Premium_LRS"
-}
-variable "private_virtual_network_with_public_ip" {
-  type    = bool
-  default = false
-}
-variable "os_disk_size_gb" {
-  type    = number
-  default = null
-}
-variable "source_image_version" {
-  type    = string
-  default = "latest"
-}
-variable "temp_resource_group_name" {
-  type    = string
-  default = "${env("TEMP_RESOURCE_GROUP_NAME")}"
-}
-variable "virtual_network_name" {
-  type    = string
-  default = "${env("VNET_NAME")}"
-}
-variable "virtual_network_resource_group_name" {
-  type    = string
-  default = "${env("VNET_RESOURCE_GROUP")}"
-}
-variable "virtual_network_subnet_name" {
-  type    = string
-  default = "${env("VNET_SUBNET")}"
-}
-variable "vm_size" {
-  type    = string
-  default = "Standard_D4s_v4"
-}
-variable "winrm_username" {         // The username used to connect to the VM via WinRM
-    type    = string                // Also applies to the username used to create the VM
-    default = "packer"
-}
-
 // Image related variables
 variable "dockerhub_login" {
   type    = string
